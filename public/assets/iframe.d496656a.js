import{a as r,p as I,l as U,b as v}from"./IFrameHelpers.8d873a6b.js";import{B as m,f as u,g as p,m as h,i as w,j as _,k as f,o as y,p as b,q as S,t as C,N as k,r as E}from"./vendor.c9d45a92.js";const x=1e3*60*60*24*7;class A{constructor(){this._loggedIn=!1,this._loginStatus=new m({}),this._loginUIStatus=new m({page:!1}),this._useCustomUI=!1,this._providedEmails=new u,this._providedSms=new u,this._canceledLogins=new u,this._providedCodes=new u}async isLoggedIn(){if(this._loggedIn){const e=this._getTokenExpirationTime(this._token);if(Date.now()<e)return!0}return!1}async login(e){if(await this.isLoggedIn())return this._loginData;if(this._loginStatus.next({isLoggingIn:!0}),await this._checkLoginStatus())return console.log("[AuthHandler] Already logged in."),await this._loadUserInfo(),this._loginData;if(e)console.log("[AuthHandler] Skipping login with UI.");else{let s;return this._useCustomUI?(console.log("[AuthHandler] Attempting login with Custom UI."),s=await this._loginWithCustomUI()):(console.log("[AuthHandler] Attempting login with new tab."),s=await this._loginWithNewTab()),s?(this._userId=s,await this._loadUserInfo(),this._loginStatus.next({authData:this._loginData}),this._loginData):(this._loginStatus.next({authData:null}),null)}return this._loginStatus.next({authData:this._loginData}),this._loginData}async createPublicRecordKey(e,s){if(console.log("[AuthHandler] Creating public record key:",e),await this.isLoggedIn()||await this.login(),!await this.isLoggedIn())return console.log("[AuthHandler] Unauthorized to create public record key."),{success:!1,errorCode:"not_logged_in",errorMessage:"User is not logged in.",errorReason:"not_logged_in"};const i=await r.createPublicRecordKey(e,s);return console.log("[AuthHandler] Record key created."),i.success===!1&&(i.errorCode==="not_logged_in"||i.errorCode==="unacceptable_session_key"||i.errorCode==="invalid_key"||i.errorCode==="session_expired")?(this._loggedIn=!1,this._token=null,await r.logout(!1),await this.createPublicRecordKey(e,s)):i}async getAuthToken(){return await this.isLoggedIn()?this._token:null}async getProtocolVersion(){return 6}async getRecordsOrigin(){return Promise.resolve(r.apiEndpoint)}async openAccountPage(){const e=new URL("/",location.origin);window.open(e.href,"_blank")}async addLoginStatusCallback(e){this._loginStatus.subscribe(s=>e(s))}async addLoginUICallback(e){this._loginUIStatus.subscribe(s=>e(s))}async setUseCustomUI(e){this._useCustomUI=!!e}async provideEmailAddress(e,s){if(!s){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showAcceptTermsOfServiceError:!0,errorCode:"terms_not_accepted",errorMessage:"You must accept the terms of service.",supportsSms:this._supportsSms});return}if(!e){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showEnterEmailError:!0,errorCode:"email_not_provided",errorMessage:"You must provide an email address.",supportsSms:this._supportsSms});return}if(!await r.validateEmail(e)){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showInvalidEmailError:!0,errorCode:"invalid_email",errorMessage:"The provided email is not accepted.",supportsSms:this._supportsSms});return}console.log("[AuthHandler] Got email."),this._providedEmails.next(e)}async provideSmsNumber(e,s){if(!s){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showAcceptTermsOfServiceError:!0,errorCode:"terms_not_accepted",errorMessage:"You must accept the terms of service.",supportsSms:this._supportsSms});return}if(!e){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showEnterSmsError:!0,errorCode:"sms_not_provided",errorMessage:"You must provide an SMS number.",supportsSms:this._supportsSms});return}if(e=e.trim(),!e.startsWith("+")){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showInvalidSmsError:!0,errorCode:"invalid_sms",errorMessage:"The phone number must include the country code.",supportsSms:this._supportsSms});return}if(!await r.validateSmsNumber(e)){this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showInvalidSmsError:!0,errorCode:"invalid_sms",errorMessage:"The provided phone number is not accepted.",supportsSms:this._supportsSms});return}console.log("[AuthHandler] Got SMS number."),this._providedSms.next(e)}async provideCode(e){console.log("[AuthHandler] Got login code."),this._providedCodes.next(e)}async cancelLogin(){console.log("[AuthHandler] Canceling login."),this._canceledLogins.next()}_getTokenExpirationTime(e){const s=I(e);return s?s[3]:-1}async _checkLoginStatus(){console.log("[AuthHandler] Checking login status...");const e=r.isLoggedIn();return e&&!r.userInfoLoaded?await r.loadUserInfo():e}async _loadUserInfo(){var e;r.userInfoLoaded||await r.loadUserInfo(),r.loadUserInfo,this._token=r.savedSessionKey,this._loginData={userId:(e=this._userId)!=null?e:r.userId,avatarUrl:r.avatarUrl,avatarPortraitUrl:r.avatarPortraitUrl,name:r.name},this._queueTokenRefresh(this._token),this._loggedIn=!0,console.log("[AuthHandler] Logged In!"),this._loginStatus.next({authData:this._loginData})}async _loginWithCustomUI(){try{let e=this._canceledLogins.pipe(p(),h(()=>null)).toPromise(),s={canceled:!1};return e.then(()=>(s.canceled=!0,null)),await Promise.race([e,this._tryLoginWithCustomUI(s)])}finally{this._loginUIStatus.next({page:!1})}}async _tryLoginWithCustomUI(e){return this._loginUIStatus.next({page:"enter_address",termsOfServiceUrl:this.termsOfServiceUrl,siteName:this.siteName,supportsSms:this._supportsSms}),(await w(this._providedEmails.pipe(_(t=>!e.canceled),h(t=>f(r.loginWithEmail(t)))),this._providedSms.pipe(_(t=>!e.canceled),h(t=>f(r.loginWithPhoneNumber(t))))).pipe(y(),b()).pipe(S(t=>{if(t.success===!0){const a=t.address,l=t.addressType;return console.log("[AuthHandler] Email sent."),this._loginUIStatus.next({page:"check_address",address:t.address,addressType:t.addressType,enterCode:!0}),this._providedCodes.pipe(S(o=>r.completeLogin(t.userId,t.requestId,o)),C(o=>{o.success==!1&&o.errorCode==="invalid_code"&&this._loginUIStatus.next({page:"check_address",address:a,addressType:l,enterCode:!0,showInvalidCodeError:!0})}))}else return console.log("[AuthHandler] Unable to send email."),t.errorCode==="unacceptable_address"?this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showInvalidEmailError:!0,errorCode:"invalid_email",errorMessage:"Unable to send an email to the provided email address.",supportsSms:this._supportsSms}):t.errorCode==="address_type_not_supported"&&this._loginUIStatus.next({page:"enter_address",siteName:this.siteName,termsOfServiceUrl:this.termsOfServiceUrl,showInvalidEmailError:!0,errorCode:"invalid_email",errorMessage:"Email addresses are not supported",supportsSms:this._supportsSms}),k}),p(t=>t.success)).toPromise()).success===!1?null:(await r.loadUserInfo(),await this._loadUserInfo(),r.userId)}_loginWithNewTab(){console.log("[AuthHandler] Opening login tab...");const e=new URL("/",location.origin),s=window.open(e.href,"_blank");return new Promise((i,n)=>{let t=!1,a;const l=U(s.origin).subscribe(o=>{const g=()=>{t||(console.log("[AuthHandler] Login canceled."),l.unsubscribe(),n(new Error("Login failed")))};s.onclose=()=>{g()},o.addEventListener("message",d=>{d.data.type==="close"?g():d.data.type==="login"?(console.log("[AuthHandler] Got User ID."),a=d.data.userId,t=!0,l.unsubscribe(),s.close(),i(a)):d.data.type==="token"&&console.log("[AuthHandler] Got token.")}),o.start&&o.start()})})}_queueTokenRefresh(e){this._refreshTimeout&&clearTimeout(this._refreshTimeout);const s=this._getTokenExpirationTime(e),i=Date.now(),n=s-i,t=Math.max(n-x,0);console.log("[AuthHandler] Refreshing token in",t/1e3,"seconds"),this._refreshTimeout=setTimeout(()=>{this._refreshToken()},t)}async _refreshToken(){if(console.log("[AuthHandler] Refreshing token..."),!this._loginData){console.log("[AuthHandler] Unable to refresh. No login data.");return}const e=await r.replaceSession();e.success?(this._token=e.sessionKey,console.log("[AuthHandler] Token refreshed!")):console.error("[AuthHandler] Failed to refresh token.",e)}get siteName(){return location.host}get termsOfServiceUrl(){return new URL("/terms",location.origin).href}get _supportsSms(){return!1}}/**
 * MIT License
 *
 * Copyright (c) 2019 Casual Simulation, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * @license MIT
 */v().then(c=>{console.log("[aux-auth/iframe/index] Got port, exposing API"),E(A,c)});console.log("[aux-auth/iframe/index] Listening for port...");
//# sourceMappingURL=iframe.d496656a.js.map
